version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: cloudops-postgres
    environment:
      POSTGRES_DB: cloudops_central
      POSTGRES_USER: cloudops
      POSTGRES_PASSWORD: cloudops123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - cloudops-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cloudops -d cloudops_central"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: cloudops-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/etc/redis/redis.conf
    command: redis-server /etc/redis/redis.conf
    networks:
      - cloudops-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./src
      dockerfile: Dockerfile
      target: development
    container_name: cloudops-backend
    environment:
      - DATABASE_URL=postgresql://cloudops:cloudops123@postgres:5432/cloudops_central
      - REDIS_URL=redis://redis:6379/0
      - DEBUG=true
    ports:
      - "8000:8000"
    volumes:
      - ./src:/app
      - /app/.venv
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cloudops-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  celery-worker:
    build:
      context: ./src
      dockerfile: Dockerfile
      target: development
    container_name: cloudops-celery-worker
    environment:
      - DATABASE_URL=postgresql://cloudops:cloudops123@postgres:5432/cloudops_central
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./src:/app
      - /app/.venv
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cloudops-network
    command: celery -A app.core.celery worker --loglevel=info

  celery-beat:
    build:
      context: ./src
      dockerfile: Dockerfile
      target: development
    container_name: cloudops-celery-beat
    environment:
      - DATABASE_URL=postgresql://cloudops:cloudops123@postgres:5432/cloudops_central
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./src:/app
      - /app/.venv
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cloudops-network
    command: celery -A app.core.celery beat --loglevel=info

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: cloudops-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_ENVIRONMENT=development
    networks:
      - cloudops-network
    command: npm run dev

  prometheus:
    image: prom/prometheus:latest
    container_name: cloudops-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - cloudops-network

  grafana:
    image: grafana/grafana:latest
    container_name: cloudops-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - cloudops-network
    depends_on:
      - prometheus

  nginx:
    image: nginx:alpine
    container_name: cloudops-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf
      - ./config/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - cloudops-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  cloudops-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16